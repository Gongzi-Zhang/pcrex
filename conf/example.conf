# example config
# comment goes after #

# @command: command starts with @
# 
# updating commands: you can use the following commands multi times (better not); but only 
#                    the last one will take effect (previous setting is coverred)
#   @dir  -- where to find rootfiles
#   @pattern  -- what rootfiles 
#   @tree -- which tree to read values
#   @cut  -- cut: must use valid branch in specified tree (friendtrees)
#
# cumulative commands: what you set with following commands will cumulate
#   @friendtree   -- may need friendtree sometimes
#   @runs/@slugs  -- you can use either one in a config file, but not use both of them simultaneously
#   @solos        -- solo variables
#   @customs      -- custom variables
#   @slopes       -- used only in aggregation
#   @comparisons  -- used for variables' comparison; the two variables must be the same type (leaf)
#   @correlations -- for correlation plots

@dir      rootfiles
@pattern  agg_minirun_xxxx.root   # use 'xxxx' to represent run/slug number;
                                  # bash glob patterns are accepted
@tree     minirun  
# friendtree must have the same entries as tree
@friendtree   bust; /path/to/rootfiles/prexPromt_pass2_xxxx.???.root   # the same pattern syntax
@friendtree   ftree               # if in the same rootfile, no need for file path
@cut      num_samples > 4500      # the same cut you can use in root macro


@runs
# @slugs
5555-6666
5678
6789


# variables
# > syntax: branch.leaf(alternative-branch)
# -- if no leaf specified, the first leaf in that branch will be used
# -- (alt-branch) is optional, if given branch is not found, alter-branch will be searched
#    if no match, program will stop
#
# !!! for some reasons I don't understand, if there is only variable in a line,
# !!! it must be ended by ';'

@solos  # var
yield_bcm_an_us.mean+yield_bcm_an_us.err++; unit; title; 
yield_bcm_an_us;            # don't forget the ending semi-colon  
yield_bpm4aX.mean(yield_bpm1X);
yield_bpm1X(yield_bpm4aX);  # exchange host-guest of above line


@customs  # name: definition
# you can construct some variables that doesn't exist in current tree 
# the expression parser is not very smart yet, so some complex expressions may not be supported
# but still worth a try
charge_bcm_an_us: yield_bcm_an_us*num_samples/30*1e-6;
yield_bcm_an_diff: (yield_bcm_an_us-yield_bcm_an_ds)/2;


@comparisons  # var1,var2
asym_usl,asym_usr;   # no leaves specified, compare their mean (first leaf)
reg_asym_us_avg.rms,reg_asym_us_dd.rms;   # must be the same leaf


@correlations # var1:var2
reg_asym_us_avg.mean:reg_asym_us_avg.rms;
charge_bcm_an_us:reg_asym_us_avg.rms;     # you can use custom variables here
