# @command value

# evt tree in japan output
# @dir	    /chafs2/work1/apar/japanOutput/
# file name pattern use glob style, except that you should write run number as xxxx.
# @pattern  prexPrompt_pass2_xxxx.???.root
@tree     evt
@cut      ErrorFlag == 0  # cut applied to tree

# @dir	    /lustre19/expphy/volatile/halla/parity/crex-respin1/postpan_respin/
# @pattern  prexPrompt_xxxx_???_regress_postpan.root  
@dir	    /lustre19/expphy/volatile/halla/parity/crex-respin1/japanOutput
@pattern  prexPrompt_pass2_xxxx.???.root  
@tree     mul 
@cut			ErrorFlag == 0


# one run (range) per line
# @runs


@entrycuts # cut on entry number, same to $Entry in tree
2234
1234:2345
:4567
66789:

# @highlightcuts	# highlight events that pass the cut

# units:
# available unit: ppm, ppb, mm, um, nm, uA, mA, nA


# cut: 
#   - currently, there are three kinds of cut: low cut, high cut, and burplevel cut
#   - low (high) cut: how far can value below (above) the average value
#     - the average value is defined as the average value of the longest consecutive segment
#   - burplevel cut: how far current value away from the mean of previous 120 events
#     value, and the sigma value is the value of previous values.
#   - any cut can be omitted, but must be seperated by ';' even being empty

# single variable: 
#   - cut: low, high, burplevel
@solos
yield_bcm_an_us; 140*uA; 150*uA; 10*uA  # same to bcm_an_us.hw_sum (for evt tree), 10 (5) uA 
                               # below (above) the average value will be regarded as outlier
yield_bcm_an_ds; ; ; 10*uA # no low or high cut, allow 5 uA deviation from previous mean value
yield_bcm_an_ds3;       # no cut

yield_usl;     # plotted variables
yield_usr;     # if there is only variable name, it must be ended by ';'


# comparisons: (var1, var2)
#   - seperate variables with ','
#   - cut: low, high
@comparisons
yield_bcm_an_us, yield_bcm_an_ds; 1*uA; 1*uA;


# correlations: (y_var:x_var)
#   - seperate variables with ':' y:x
#   - cut: slope_low, sloep_high
@correlations


# customized variables: (var_name: definition)
#  * supported operations: + - * / %
#  * supported functions: sqrt, pow
#  * supported constants: ?
# you can also use customized variables in comparison or correlation plots
@customs
# yield_us_dd: (yield_usl - yield_usr)/2;
# yield_us_avg: sqrt(pow(yield_usl, 2) + pow(yield_usr, 2))/sqrt(2);

# vim: set shiftwidth=2 softtabstop=2 tabstop=2: #
